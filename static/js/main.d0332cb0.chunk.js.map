{"version":3,"sources":["components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TopNavbar","props","useState","show","setShow","Navbar","bg","expand","sticky","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","as","Link","target","Form","Control","type","placeholder","onChange","openFile","onClick","saveFile","inline","theme","themeMode","Modal","onHide","animation","Header","closeButton","Title","Body","Group","Label","name","find","value","findValue","replace","replaceValue","Check","label","checked","ischecked","matchCase","Button","variant","findTextHandler","disabled","replaceHandler","replaceTextHandler","Footer","toast","configure","App","state","darkTheme","Counter","setState","filename","prompt","content","stripTags","file","Blob","saveAs","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","e","regex","valueToFind","valueToReplace","trim","alert","RegExp","match","length","document","getElementsByClassName","style","opacity","display","replaceAll","html","str","handleChange","localStorage","setItem","JSON","stringify","fileread","FileReader","onload","console","log","textContent","result","readAsText","files","contentEditable","React","createRef","this","parse","getItem","basename","saveAsHandler","exact","path","render","innerRef","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d0332cb0.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, NavDropdown, Modal, Button, Form } from \"react-bootstrap\";\r\n\r\nconst TopNavbar = (props) => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\r\n        <Navbar.Brand to=\"/\">NOTEPAD</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto text-uppercase\">\r\n            <NavDropdown title=\"File\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item as={Link} to=\"/\" target=\"_blank\">\r\n                New\r\n              </NavDropdown.Item>\r\n              <div className=\"upload-btn-wrapper\">\r\n                <button className=\"fileButton\">Open</button>\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  placeholder=\"Choose File\"\r\n                  className=\"inputfile\"\r\n                  onChange={props.openFile}\r\n                />\r\n              </div>\r\n              <NavDropdown.Item as={Link} to=\"#\" onClick={props.saveFile}>\r\n                Save\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <Nav.Link as={Link} to=\"#\" onClick={handleShow}>\r\n              Find And Replace\r\n            </Nav.Link>\r\n          </Nav>\r\n          <div className=\"theme-mode text-center\" inline=\"true\">\r\n            <h6>{props.theme ? \"DARK THEME\" : \"LIGHT THEME\"}</h6>\r\n            <label className=\"switch\">\r\n              <input type=\"checkbox\" onChange={props.themeMode} />\r\n              <span className=\"slider round\"></span>\r\n            </label>\r\n          </div>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      {/* Find Replace popup modal */}\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        animation={false}\r\n        className=\"hide-modal\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Find And Replace</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Find What</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Find What\"\r\n              name=\"find\"\r\n              className=\"find\"\r\n              onChange={props.find}\r\n              value={props.findValue}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Replace With</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Replace With\"\r\n              onChange={props.replace}\r\n              className=\"replace\"\r\n              value={props.replaceValue}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label=\"Match Case\"\r\n              checked={props.ischecked}\r\n              onChange={props.matchCase}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={props.findTextHandler}\r\n            className=\"mr-2 findButton\"\r\n            disabled={props.findValue === \"\" ? true : false}\r\n          >\r\n            Find\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            className=\"replaceText mr-2\"\r\n            onClick={props.replaceHandler}\r\n            disabled={props.replaceValue === \"\" ? true : false}\r\n          >\r\n            Replace\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            className=\"replaceButton\"\r\n            onClick={props.replaceTextHandler}\r\n            disabled={props.replaceValue === \"\" ? true : false}\r\n          >\r\n            Replace All\r\n          </Button>\r\n        </Modal.Body>\r\n      </Modal>\r\n      {/* Find Replace popup modal */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TopNavbar;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Fragment>\r\n      <footer>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12 py-2 bg-light copyright\">\r\n              <p className=\"text-center mb-0 text-uppercase text-secondary\">\r\n                Notepad Web App Made With React\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TopNavbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ContentEditable from \"react-contenteditable\";\nimport { saveAs } from \"file-saver\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Footer from \"./components/Footer\";\n\ntoast.configure();\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.contentEditable = React.createRef();\n  }\n\n  state = {\n    value: \"\",\n    find: \"\",\n    replace: \"\",\n    darkTheme: false,\n    ischecked: false,\n    Counter: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      darkTheme: JSON.parse(localStorage.getItem(\"darkTheme\")),\n    });\n  }\n\n  matchCase = () => {\n    //console.log(this.state.ischecked);\n    this.setState({\n      ischecked: !this.state.ischecked,\n    });\n  };\n\n  saveFile = () => {\n    const filename = prompt(\"Please Enter Your Filename\");\n    if (filename) {\n      const content = this.stripTags(this.state.value);\n      const file = new Blob([content], {\n        type: \"text/plain;charset=utf-8\",\n      });\n      saveAs(file, `${filename}`);\n      toast.success(\"File Saved Successfully\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else {\n      toast.error(\"Please Type Your Filename\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n\n  find = (e) => {\n    this.setState({\n      find: e.target.value,\n    });\n  };\n\n  replace = (e) => {\n    this.setState({\n      replace: e.target.value,\n    });\n  };\n\n  replaceHandler = () => {\n    const valueToFind = this.state.find;\n    const valueToReplace = this.state.replace;\n    let value = this.stripTags(this.state.value);\n    //console.log(valueToReplace, value, valueToFind);\n    // match value and replace text\n    if (valueToReplace.trim() === \"\") {\n      alert(\"Please Add Some Text\");\n      return false;\n    } else {\n      let regex;\n      if (this.state.ischecked) {\n        regex = new RegExp(valueToFind, \"i\");\n      } else {\n        regex = new RegExp(valueToFind);\n      }\n      if (value.match(regex)) {\n        if (value.length > 0) {\n          if (this.state.ischecked === true) {\n            value = value.replace(regex, valueToReplace);\n          } else {\n            value = value.replace(regex, valueToReplace);\n          }\n        }\n      } else {\n        alert(`Cannot Replace ${valueToReplace}`);\n        document.getElementsByClassName(\"show\")[0].style.opacity = \"0\";\n        document.getElementsByClassName(\"hide-modal\")[0].style.display = \"none\";\n        this.setState({\n          find: \"\",\n          replace: \"\",\n          ischecked: false,\n        });\n      }\n    }\n    this.setState({\n      value: value,\n    });\n  };\n\n  replaceTextHandler = () => {\n    const valueToFind = this.state.find;\n    const valueToReplace = this.state.replace;\n    let value = this.stripTags(this.state.value);\n    // match value and replace text\n    if (valueToReplace.trim() === \"\") {\n      alert(\"Please Add Some Text\");\n      return false;\n    } else {\n      let regex;\n      if (this.state.ischecked) {\n        regex = new RegExp(valueToFind, \"ig\");\n      } else {\n        regex = new RegExp(valueToFind);\n      }\n      if (value.match(regex)) {\n        if (value.length > 0) {\n          if (this.state.ischecked === true) {\n            value = value.replaceAll(regex, valueToReplace);\n          } else {\n            value = value.replaceAll(valueToFind, valueToReplace);\n          }\n\n          toast.success(\"Text Replaced Successfully\", {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          this.setState({\n            find: \"\",\n            replace: \"\",\n            ischecked: false,\n          });\n          document.getElementsByClassName(\"show\")[0].style.opacity = \"0\";\n          document.getElementsByClassName(\"hide-modal\")[0].style.display =\n            \"none\";\n        } else {\n          toast.error(\"Oops ! Something Went Wrong\", {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }\n      } else {\n        alert(`Cannot Replace ${valueToReplace}`);\n      }\n    }\n    this.setState({\n      value: value,\n    });\n  };\n\n  stripTags = (html) => {\n    return html.replaceAll(/(<([^>]+)>)/gi, \"\");\n  };\n\n  findTextHandler = () => {\n    const valueToFind = this.state.find;\n    let value = this.stripTags(this.state.value);\n\n    if (valueToFind.trim() === \"\") {\n      alert(\"Please Add Some Text\");\n      return false;\n    } else {\n      let regex;\n      if (this.state.ischecked) {\n        regex = new RegExp(valueToFind, \"ig\");\n      } else {\n        regex = new RegExp(valueToFind);\n      }\n      if (value.match(regex)) {\n        if (value.length > 0) {\n          if (this.state.ischecked === true) {\n            value = value.replace(regex, function (str) {\n              return `<span class=\"highlight\">${str}</span>`;\n            });\n          } else {\n            value = value.replaceAll(\n              valueToFind,\n              `<span class=\"highlight\">${valueToFind}</span>`\n            );\n          }\n        }\n      } else {\n        alert(`Cannot match ${valueToFind}`);\n      }\n    }\n\n    this.setState({\n      value: value,\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  themeMode = () => {\n    this.setState({\n      darkTheme: !this.state.darkTheme,\n    });\n    localStorage.setItem(\"darkTheme\", JSON.stringify(!this.state.darkTheme));\n    return this.state.darkTheme || false;\n  };\n\n  openFile = (e) => {\n    const fileread = new FileReader();\n    fileread.onload = (e) => {\n      console.log(e.target);\n      document.getElementsByClassName(\"notepad\")[0].textContent =\n        fileread.result;\n      this.setState({\n        value: fileread.result,\n      });\n    };\n    fileread.readAsText(e.target.files[0]);\n    //document.getElementsByClassName(\"dropdown-menu\")[0].style.display = \"none\";\n  };\n\n  render() {\n    return (\n      <div className={this.state.darkTheme ? \"dark-theme\" : \"light-theme\"}>\n        <Router basename={\"/Notepad-Web-App\"}>\n          <TopNavbar\n            saveFile={this.saveFile}\n            find={this.find}\n            replace={this.replace}\n            findTextHandler={this.findTextHandler}\n            replaceTextHandler={this.replaceTextHandler}\n            replaceHandler={this.replaceHandler}\n            findValue={this.state.find}\n            replaceValue={this.state.replace}\n            openFile={this.openFile}\n            saveAsHandler={this.saveAsHandler}\n            themeMode={this.themeMode}\n            theme={this.state.darkTheme}\n            matchCase={this.matchCase}\n            ischecked={this.state.ischecked}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <div className=\"container py-5\">\n                  <ContentEditable\n                    className=\"notepad\"\n                    innerRef={this.contentEditable}\n                    html={this.state.value}\n                    disabled={false}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              )}\n            />\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ToastContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}